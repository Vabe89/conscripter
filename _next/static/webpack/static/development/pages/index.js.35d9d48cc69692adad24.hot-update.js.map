{"version":3,"file":"static/webpack/static/development/pages/index.js.35d9d48cc69692adad24.hot-update.js","sources":["webpack:///./components/glyph-preview.js"],"sourcesContent":["import css from './glyph-preview.scss'\nimport * as cx from 'classnames'\nimport Typography from './typography';\n\nexport default function GlyphPreview({\n  commands,\n  advanceWidth,\n  unitsPerEm,\n  descender,\n  isDiacritic,\n  className,\n  showContext = true\n}) {\n  if (!unitsPerEm) return null\n  advanceWidth = Math.max(advanceWidth, 100)\n  const widthEm = advanceWidth / unitsPerEm\n  let transform = `translate(-50%, 0%)`\n  if (widthEm > 1) {\n    transform += ` scale(${(1 / widthEm).toFixed(2)})`\n  }\n  const path = commands.map(c => {\n    switch (c.type) {\n      case 'M':\n      case 'L':\n        return `${c.type} ${c.x} ${unitsPerEm - c.y + descender}`\n      case 'Z':\n        return `${c.type}`\n    }\n  }).join(' ')\n  const baseline = (unitsPerEm + descender) / unitsPerEm\n  // these two depend on the font\n  const topline = '0.4em'\n  const textCorrection = '0em'\n  return (\n    <div className={cx(css.container, className)}>\n      <div className={css.subcontainer} style={{ transform, transformOrigin: 'bottom center' }}>\n        {showContext && [\n          <div className={css.rule} style={{ top: baseline + 'em', background: 'magenta' }} key='base'/>,\n          <div className={css.rule} style={{ top: topline, background: 'lime' }} key='top'/>\n        ]}\n        <div className={css.textcontainer}>\n          {showContext && (\n            <span className={cx(css.faded, Typography.BaseDemofont)} style={{ textAlign: 'right', direction: 'rtl', paddingTop: textCorrection }}>abcdef</span>\n          )}\n          <svg className={css.glyph} height=\"1em\" width={`${widthEm}em`} viewBox={`0 0 ${advanceWidth} ${unitsPerEm}`} preserveAspectRatio='xMinYMin slice'>\n            {isDiacritic && (\n              <circle r={200} cx={advanceWidth / 2} cy={620} fill='transparent' stroke='#2b303a' strokeWidth={20} strokeDasharray=\"35 35\"/>\n            )}\n            <path d={path} fill=\"black\"/>\n          </svg>\n          {showContext && (\n            <span className={cx(css.faded, Typography.BaseDemofont)} style={{ textAlign: 'left', paddingTop: textCorrection }}>ghijk</span>\n          )}\n        </div>\n      </div>\n      <div className={css.edges}/>\n    </div>\n  )\n}"],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AAEA;AAQA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AALA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;;;;A","sourceRoot":""}