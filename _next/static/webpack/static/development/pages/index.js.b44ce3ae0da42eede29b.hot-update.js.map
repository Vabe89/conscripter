{"version":3,"file":"static/webpack/static/development/pages/index.js.b44ce3ae0da42eede29b.hot-update.js","sources":["webpack:///./components/glyph-grid.js"],"sourcesContent":["/**\n * Grid of glyphs, displaying each with the relevant substitutions\n */\n\nimport css from './glyph-grid.scss'\nimport GlyphPreview from './glyph-preview'\nimport * as cx from 'classnames'\n\nexport default function GlyphGrid({ substitutions, meta, active, children, onSubstitutionSelect, onSubstitutionSwap }) {\n  const symbols = []\n  const gridcells = []\n  let foundActive = false\n  let hasActive = active != null\n\n  if (substitutions.length === 0 && !active) {\n    return (\n      <div className={css.grid}>\n        <button className={cx(css.emptyset)} onClick={() => onSubstitutionSelect()}>\n        Click here to get started\n        </button>\n      </div>\n    )\n  }\n\n  function Btn({children, isActive, onClick}) {\n    return (\n      <button className={cx(css.container, { [css.activecell]: isActive, [css.disabled]: hasActive })} disabled={hasActive} onClick={onClick}>\n        {children}\n      </button>\n    )\n  }\n\n  function onDragStart(e) {\n    e.dataTransfer.setData('number', parseInt(e.currentTarget.attributes['data-index'].value))\n  }\n\n  function onDragOver(e) {\n    if (e.currentTarget.attributes['data-index'].value) {\n      e.preventDefault()\n    }\n  }\n\n  function onDrop(e) {\n    const self = parseInt(e.currentTarget.attributes['data-index'].value)\n    const other = e.dataTransfer.getData('number')\n    if (self !== other) {\n      onSubstitutionSwap(self, other)\n    }\n  }\n\n  for (let i = 0; i < substitutions.length; i++) {\n    const sub = substitutions[i]\n    const { replace, glyph } = sub\n    const key = replace.join('/')\n    const isActive = active === sub\n    const button = (\n      <Btn isActive={isActive} onClick={() => onSubstitutionSelect(sub)}>\n        <div className={css.label}>{key}</div>\n        <GlyphPreview className={css.preview} {...glyph} {...meta}/>\n      </Btn>\n    )\n    foundActive = foundActive || isActive\n    gridcells.push({\n      key,\n      index: i,\n      button,\n      isActive\n    })\n  }\n\n  gridcells.push({\n    key: 'add',\n    button: (<Btn onClick={() => onSubstitutionSelect()}>+</Btn>),\n    isActive: hasActive && !foundActive\n  })\n\n  for (const { key, index, button, isActive } of gridcells) {\n    const className = cx(css.gridcell, {\n      [css.inactive]: !isActive && hasActive\n    })\n    symbols.push(\n      <div\n        className={className}\n        key={key}\n        data-index={index}\n        draggable={!hasActive && index != null}\n        onDragStart={onDragStart}\n        onDrop={onDrop}\n        onDragOver={onDragOver}\n      >\n        {button}\n        {isActive && (\n          <div className={css.detailsspacer}>\n            <div className={css.details}>\n              {children}\n            </div>\n          </div>\n        )}\n      </div>\n    )\n  }\n  \n  return (\n    <div className={css.grid}>\n      {symbols}\n    </div>\n  )\n}"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAIA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA;AACA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAzCA;AA2CA;AA3CA;AAAA;AA6CA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AAJA;AAtDA;AACA;AAyCA;AAAA;AAkBA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAHA;AA9DA;AACA;AAmEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;;;;A","sourceRoot":""}