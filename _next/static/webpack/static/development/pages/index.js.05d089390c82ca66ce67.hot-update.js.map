{"version":3,"file":"static/webpack/static/development/pages/index.js.05d089390c82ca66ce67.hot-update.js","sources":["webpack:///./components/slider.js"],"sourcesContent":["import Label from \"./label\";\nimport Typography from \"./typography\";\nimport css from './slider.scss'\n\nconst noopFormat = v => v\n\nexport default class Slider extends React.PureComponent {\n  constructor(props) {\n    super(props)\n    this.state = {\n      isActive: false,\n    }\n\n    this.track = React.createRef()\n\n    this.setAbsolute = (e) => {\n      onChange(this.computeNewValue(e.clientX))\n    }\n    this.onMouseMove = (e) => {\n      const newv = this.computeNewValue(e.clientX)\n      console.log(newv)\n      if (!this.state.isActive) {\n        return\n      }\n    }\n  }\n  computeNewValue(clientX) {\n    const rect = this.track.current.getBoundingClientRect()\n    const newpct = (clientX - rect.left) / rect.width\n    const {\n      min = 0,\n      max = 1,\n      step = 1\n    } = this.props\n    const domainvalue = (newpct * (max - min) + min)\n    const steppedvalue = Math.round(domainvalue / step) * step\n    const boundvalue = Math.max(min, Math.min(max, steppedvalue))\n    return boundvalue\n  }\n  computeRunnerStyle(pct) {\n    return {\n      width: `${(pct*100).toFixed(2)}%`\n    }\n  }\n  computeThumbStyle(pct) {\n    const percentage = `${(pct*100).toFixed(2)}%`\n    const offset = (pct * 16).toFixed(2) + 'px'\n    return {\n      left: `calc(${percentage} - ${offset})`\n    }\n  }\n  render() {\n    const {\n      label,\n      format = noopFormat,\n      value,\n      min = 0,\n      max = 1,\n      step = 1\n    } = this.props\n\n    const pct = (Math.round(value / step) * step - min) / (max - min)\n\n\n    return (\n      <div>\n        <Label>\n          {label}\n          <Typography.Small>{format(value)}</Typography.Small>\n        </Label>\n        <div\n          className={css.trackcontainer}\n          onMouseMove={this.onMouseMove}\n          onClick={this.setAbsolute}\n        >\n          <div className={css.track} ref={this.track}>\n            <div\n              className={css.runner}\n              style={this.computeRunnerStyle(pct)}\n            />\n            <div\n              className={css.thumb}\n              style={this.computeThumbStyle(pct)}\n            />\n          </div>\n        </div>\n      </div>\n    )\n  }\n}"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AACA;AACA;AADA;AAIA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAlBA;AAkBA;AACA;;;AAAA;AACA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA;AADA;AAGA;;;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AAGA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;;;;AAlFA;AACA;;;;;A","sourceRoot":""}