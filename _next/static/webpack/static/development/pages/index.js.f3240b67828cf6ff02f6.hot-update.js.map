{"version":3,"file":"static/webpack/static/development/pages/index.js.f3240b67828cf6ff02f6.hot-update.js","sources":["webpack:///./state/reducers/fonts/assembleDataUri.js"],"sourcesContent":["const opentype = require('opentype.js')\nconst slugify = require('slugify')\n\nconst defaultFontName = 'conscripter-custom-font'\n\nconst fontPrototype = Object.getPrototypeOf(new opentype.Font({\n  familyName: 'test',\n  styleName: 'test',\n  unitsPerEm: 1000,\n  ascender: 800,\n  descender: -200,\n  glyphs: {}\n}))\n\nconst defaultGsub = {\n  \"version\": 1,\n  \"scripts\": [\n    {\n      \"tag\": \"DFLT\",\n      \"script\": {\n        \"defaultLangSys\": {\n          \"reserved\": 0,\n          \"reqFeatureIndex\": 65535,\n          \"featureIndexes\": [\n            0\n          ]\n        },\n        \"langSysRecords\": []\n      }\n    },\n    {\n      \"tag\": \"latn\",\n      \"script\": {\n        \"defaultLangSys\": {\n          \"reserved\": 0,\n          \"reqFeatureIndex\": 65535,\n          \"featureIndexes\": [\n            0\n          ]\n        },\n        \"langSysRecords\": []\n      }\n    }\n  ],\n  \"features\": [\n    {\n      \"tag\": \"calt\",\n      \"feature\": {\n        \"featureParams\": 0,\n        \"lookupListIndexes\": []\n      }\n    }\n  ],\n  lookups: []\n}\n\nfunction arrayBufferToBase64( buffer ) {\n  var binary = '';\n  var bytes = new Uint8Array( buffer );\n  var len = bytes.byteLength;\n  for (var i = 0; i < len; i++) {\n      binary += String.fromCharCode( bytes[ i ] );\n  }\n  return window.btoa( binary );\n}\n\nfunction assertBadInput(truthy, message) {\n  if (!truthy) {\n    const error = new Error(message)\n    error.status = 400\n    throw error\n  }\n}\n\nfunction makeSingleSubstitutionLookup(font, character, glyph) {\n\n  let leadingGlyph = font.charToGlyphIndex(character)\n    \n  const subtable = {\n    substFormat: 1,\n    coverage: {\n      format: 1,\n      glyphs: [leadingGlyph]\n    },\n    deltaGlyphId: glyph - leadingGlyph\n  }\n\n  return {\n    lookupType: 1,\n    lookupFlag: 0,\n    subtables: [subtable]\n  }\n}\n\nfunction makeMultiSubstitutionLookup(font, characters, glyph) {\n\n  const components = new Array(characters.length - 1)\n  for (let i = 1; i < characters.length; i++) {\n    components[i - 1] = font.charToGlyphIndex(characters[i])\n  }\n  let leadingGlyph = font.charToGlyphIndex(characters[0])\n    \n  const subtable = {\n    substFormat: 1,\n    coverage: {\n      format: 1,\n      glyphs: [leadingGlyph]\n    },\n    ligatureSets: [[{ ligGlyph: glyph, components }]]\n  }\n\n  return {\n    lookupType: 4,\n    lookupFlag: 0,\n    subtables: [subtable]\n  }\n}\n\nfunction addSubstitution(font, characters, glyph) {\n\n  assertBadInput(typeof (characters) === 'string', 'characters argument must be a string')\n  assertBadInput(characters.length >= 1, 'characters argument must be a string >= 1')\n  assertBadInput(typeof (glyph) === 'number', 'glyph argument must be a glyph code')\n  assertBadInput(Object.getPrototypeOf(font) === fontPrototype, 'font must be an instance of opentype.Font')\n\n  const gsub = font.tables.gsub = font.tables.gsub || JSON.parse(JSON.stringify(defaultGsub))\n\n  if (characters.length > 1) {\n    gsub.lookups.push(makeMultiSubstitutionLookup(font, characters, glyph))\n  } else {\n    gsub.lookups.push(makeSingleSubstitutionLookup(font, characters, glyph))\n  }\n\n  gsub.features[0].feature.lookupListIndexes.push(gsub.lookups.length - 1)\n}\n\nfunction addGlyph(font, { advanceWidth, commands }) {\n  const g = new opentype.Glyph({\n    index: font.glyphs.length,\n    name: `glyph${font.glyphs.lengt}`\n  })\n  g.advanceWidth = advanceWidth\n  g.path = new opentype.Path({\n    fill: 'black',\n    stroke: null,\n    strokeWidth: 1,\n    unitsPerEm: font.unitsPerEm\n  })\n  g.path.commands = commands\n  font.glyphs.push(g.index, g)\n  return g\n}\n\nfunction applySubstitutions(font, substitutions, fontname = defaultFontName) {\n  for (const { replace, glyph } of substitutions) {\n    const glyphId = addGlyph(font, glyph)\n    for (const text of replace) {\n      addSubstitution(font, text, glyphId.index)\n    }\n  }\n\n  font.names = {\n    copyright: {\n      en: 'Made by Conscripter, a tool for building conlang scripts\\n\\nLicence: CC0 1.0\\n\\nBase glyphs are derived from AVHershey Simplex, created in 2016 by Stewart C. Russel (scruss.com), which is in turn dervied from the character stroke coordinates publshed by Allen V. Hershey in \\\"Calligraphy for Computers\\\". Additional glyphs included through use of the app may have a different licence.'\n    },\n    fontFamily: {\n      en: fontname\n    },\n    fontSubfamily: {\n      en: 'Medium'\n    },\n    fullName: {\n      en: fontname + 'Medium'\n    },\n    version: {\n      en: 'Version 000.001'\n    },\n    postScriptName: {\n      en: (fontname + 'Medium').replace(/\\s/gi, '')\n    }\n  }\n}\n\nfunction assembleDataUri(buffer, substitutions, fontname) {\n  const font = opentype.parse(buffer)\n  applySubstitutions(font, substitutions, fontname)\n  console.log(JSON.stringify(gsub.lookups, null, ' '))\n\n  return {\n    datauri: 'data:font/otf;base64,' + arrayBufferToBase64(font.toArrayBuffer()),\n    meta: {\n      unitsPerEm: font.unitsPerEm,\n      descender: font.descender\n    }\n  }\n}\n\nfunction download(buffer, substitutions, fontname = defaultFontName) {\n  const font = opentype.parse(buffer)\n  applySubstitutions(font, substitutions, fontname)\n  const downloadname = slugify(fontname || defaultFontName) + '.otf'\n  font.download(downloadname)\n}\n\nmodule.exports = {\n  applySubstitutions,\n  assembleDataUri,\n  download\n}"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AASA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAHA;AAOA;AARA;AAFA;AAcA;AACA;AACA;AACA;AACA;AACA;AAHA;AAOA;AARA;AAFA;AAcA;AAEA;AACA;AACA;AACA;AAFA;AAFA;AAQA;AAvCA;AACA;AAyCA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAFA;AAIA;AANA;AASA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAFA;AAIA;AAAA;AAAA;AAAA;AANA;AASA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AACA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAEA;AAAA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AANA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAOA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAhBA;AAoBA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAFA;AAFA;AAOA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;;;;A","sourceRoot":""}