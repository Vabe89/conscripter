{"version":3,"file":"static/webpack/static/development/pages/index.js.3ab559de31797a4e95b7.hot-update.js","sources":["webpack:///./multiple-error.js","webpack:///./pages/index.js","webpack:///./state/actionTypes.js","webpack:///./state/actions.js","webpack:///./state/index.js","webpack:///./state/reducers/list.js"],"sourcesContent":["export default class MultipleErrors extends Error {\n  constructor(message, details) {\n    super(message)\n    this.details = details\n  }\n}","import css from './index.scss'\nimport { createStore, actions } from '../state'\nimport { connect, Provider } from 'react-redux'\nimport SubstitutionEditor from '../components/substitution-editor'\nimport GlyphGrid from '../components/glyph-grid'\nimport Preview from '../components/preview';\nimport Button, { ButtonBar } from '../components/button';\nimport GithubCorner from '../components/github-corner'\nimport Description from '../components/description';\nimport Header from '../components/header';\nimport Head from '../components/head';\nimport Footer from '../components/footer';\nimport Typography from '../components/typography';\nimport Text from '../components/text';\nimport Links from '../components/links';\nimport Print from '../components/print.scss'\n\nconst store = createStore()\n\nconst PreviewPlaceholder = `the quick brown fox jumps over the lazy red dog\n\n123456789`\n\nconst FontStyle = connect(\n  state => ({ data: state.fonts.datauri })\n)(function ({ data }) {\n  if (!data) return null\n  return (\n    <style id='test' dangerouslySetInnerHTML={{__html:'@font-face { font-family: demofont; src: url(\\'' + data + '\\');} @font-face { font-family: base-demofont; src: url(' + BASE_LINK + '/static/AVHersheySimplexMedium.otf' + ');}'}}></style>\n  )\n})\n\nconst ConnectedGlyphGrid = connect(\n  state => ({ ...state.fonts, ...state.substitution }),\n  dispatch => ({\n    onSubstitutionSelect: (substitution) => dispatch(actions.selectSubstitution(substitution)),\n    onSubstitutionSwap: (a, b) => dispatch(actions.swapSubstitution(a, b))\n  })\n)(GlyphGrid)\n\nconst ConnectedSubstitutionEditor = connect(\n  state => {\n    const {\n      fonts,\n      substitution\n    } = state\n\n    const idx = fonts.substitutions.indexOf(substitution.active)\n    const canRemove = idx >= 0\n    const canMoveLeft = idx > 0\n    const canMoveRight = idx < fonts.substitutions.length - 1 && idx >= 0\n    \n    return ({\n      ...fonts,\n      ...substitution,\n      idx,\n      canRemove,\n      canMoveLeft,\n      canMoveRight\n    })\n  },\n  (dispatch) => ({\n    onUpload: ({ contents }) => dispatch(actions.updateSubstitutionGlyph(store.getState().fonts.meta, contents)),\n    onReplaceChange: (value) => dispatch(actions.updateSubstitutionReplace(value)),\n    onAdvanceWidthChange: (value) => dispatch(actions.updateSubstitutionAdvanceWidth(value)),\n    onRemove: () => dispatch(actions.removeSubstitution(store.getState().substitution)),\n    onSubmit: () => dispatch(actions.submitSubstitution(store.getState().substitution)),\n    onCancel: () => dispatch(actions.cancelSubstitution()),\n    onSwap: (a, b) => dispatch(actions.swapSubstitution(a, b))\n  })\n)(SubstitutionEditor)\n\n\nconst ConnectedTopActionSet = connect(\n  state => ({ loadError: state.fonts.error }),\n  dispatch => ({\n    onDownload: () => dispatch(actions.download()),\n    onSave: () => dispatch(actions.save(store.getState())),\n    onLoad: () => dispatch(actions.load())\n  })\n)(function ({\n  loadError,\n  onDownload,\n  onSave,\n  onLoad\n}) {\n  return (\n    <div className={Print.none}>\n      <Description>\n        Make sure to read the <Links.Usage/> to figure out how to use your downloaded font!\n      </Description>\n      <ButtonBar>\n        <Button title='Export OTF for use as font' variant='success' onClick={onDownload}>Export<Typography.Small>(.otf)</Typography.Small></Button>\n        <Button title='Save workspace to JSON to use later' variant='default' onClick={onSave}>Save<Typography.Small>(.json)</Typography.Small></Button>\n        <Button title='Load workspace from JSON' variant='default' onClick={onLoad}>Load<Typography.Small>(.json)</Typography.Small></Button>\n      </ButtonBar>\n      {loadError && (\n        <Description variant='danger'>{loadError.message}</Description>\n      )}\n    </div>\n  )\n})\n\nconst ConnectedFontName = connect(\n  state => ({ value: state.fonts.fontname }),\n  dispatch => ({\n    onChange: (value) => dispatch(actions.setFontName(value))\n  })\n)(Text.Field)\n\nconst ConnectedHelmet = connect(\n  state => ({\n    title: state.fonts.fontname\n  })\n)(Head)\n\nexport default class Index extends React.Component {\n  componentDidMount() {\n    store.dispatch(actions.fetchFonts())\n  }\n\n  render() {\n    return (\n      <Provider store={store}>\n        <div className={css.root}>\n          <ConnectedHelmet/>\n          <GithubCorner url='https://github.com/dougrich/conscripter'/>\n          <FontStyle />\n          <Header/>\n          <div className={css.container} role=\"main\">\n            <div className={css.topaction}>\n              <ConnectedTopActionSet/>\n              <ConnectedFontName label='Font Name' placeholder='Display name for your font'/>\n            </div>\n            <div className={css.workspace}>\n              <div className={css.panel}>\n                <div className={css.internalpanel}>\n                  <Typography.Header.Section>Substitutions</Typography.Header.Section>\n                  <ConnectedGlyphGrid>\n                    <ConnectedSubstitutionEditor/>\n                  </ConnectedGlyphGrid>\n                </div>\n              </div>\n              <div className={css.panel}>\n              <Typography.Header.Section>Preview</Typography.Header.Section>\n                <Preview defaultValue={PreviewPlaceholder}/>\n              </div>\n            </div>\n          </div>\n          <Footer/>\n        </div>\n      </Provider>\n    )\n  }\n}","export const\n  FETCH_FONTS = 'fetch_font',\n  DOWNLOAD = 'download',\n  SET_FONTNAME = 'set_fontname',\n  ADD_SUBSTITUTION = 'add_substitution',\n  SWAP_SUBSTITUTION = 'swap_substitution',\n  REMOVE_SUBSTITUTION = 'remove_substitution',\n  SELECT_SUBSTITUTION = 'select_substitution',\n  UPDATE_SUBSTITUTION = 'update_substitution',\n  CANCEL_SUBSTITUTION = 'cancel_substitution',\n  SAVE = 'save',\n  LOAD = 'load'","import fetch from 'isomorphic-unfetch'\nimport * as opentype from 'opentype.js'\nimport * as PathParser from './reducers/fonts/parsePath'\nimport MultipleError from '../multiple-error'\n\n\nimport {\n  FETCH_FONTS,\n  ADD_SUBSTITUTION,\n  SELECT_SUBSTITUTION,\n  UPDATE_SUBSTITUTION,\n  CANCEL_SUBSTITUTION,\n  REMOVE_SUBSTITUTION,\n  DOWNLOAD,\n  SET_FONTNAME,\n  SWAP_SUBSTITUTION,\n  SAVE,\n  LOAD\n} from './actionTypes'\n\nimport {\n  STATUS_OK,\n  STATUS_ERROR\n} from './status'\nimport slugify from 'slugify';\n\n/**\n * Fetches and parses the base font\n * @returns {*} dispatchable event object\n */\nexport function fetchFonts() {\n  return dispatch => {\n    dispatch({ type: FETCH_FONTS })\n    return fetch(BASE_LINK + '/static/AVHersheySimplexMedium.otf')\n      .then(response => {\n        if (response.status !== 200) {\n          dispatch(fetchFontError())\n          throw new Error('Non 200 response')\n        } else {\n          return response.arrayBuffer()\n        }\n      })\n      .then(buffer => {\n        dispatch(fetchFontResult(buffer))\n      })\n  }\n}\n\n/**\n * Result of fetching the font\n * @returns {*} dispatchable event object\n */\nexport function fetchFontResult(buffer) {\n  return {\n    type: FETCH_FONTS,\n    status: STATUS_OK,\n    buffer\n  }\n}\n\n/**\n * Result of fetching the font when an error occurs\n * @returns {*} dispatchable event object\n */\nexport function fetchFontError() {\n  return {\n    type: FETCH_FONTS,\n    status: STATUS_ERROR\n  }\n}\n\nexport function updateSubstitutionGlyph(meta,svg) {\n  const parser = new PathParser(meta)\n  const { commands, warnings } = parser.parse(svg)\n  return {\n    type: UPDATE_SUBSTITUTION,\n    field: 'glyph/commands',\n    warnings,\n    value: commands\n  }\n}\n\nexport function updateSubstitutionReplace(value) {\n  return {\n    type: UPDATE_SUBSTITUTION,\n    field: 'replace',\n    value\n  }\n}\n\nexport function updateSubstitutionAdvanceWidth(value) {\n  return {\n    type: UPDATE_SUBSTITUTION,\n    field: 'glyph/advanceWidth',\n    value\n  }\n}\n\nexport function removeSubstitution({ active }) {\n  return dispatch => {\n    dispatch({\n      type: REMOVE_SUBSTITUTION,\n      substitution: active\n    })\n    dispatch(cancelSubstitution())\n  }\n}\n\nexport function cancelSubstitution() {\n  return { type: CANCEL_SUBSTITUTION }\n}\n\nexport function submitSubstitution({ active, currentGlyph, currentReplace }) {\n  return dispatch => {\n    dispatch({\n      type: ADD_SUBSTITUTION,\n      substitution: {\n        replace: [currentReplace],\n        glyph: currentGlyph\n      },\n      replace: active\n    })\n    dispatch(cancelSubstitution())\n  }\n}\n\nexport function selectSubstitution(substitution) {\n  return {\n    type: SELECT_SUBSTITUTION,\n    substitution: substitution || {\n      replace: [''],\n      glyph: {\n        advanceWidth: 1000,\n        commands: []\n      }\n    }\n  }\n}\n\nexport function download() {\n  return { type: DOWNLOAD }\n}\n\nexport function setFontName(value) {\n  return {\n    type: SET_FONTNAME,\n    value\n  }\n}\n\nexport function swapSubstitution(a, b) {\n  return {\n    type: SWAP_SUBSTITUTION,\n    a,\n    b\n  }\n}\n\nexport function save({ fonts: { substitutions, fontname }}) {\n  const data = 'data:text/json;charset=utf-8,' + encodeURIComponent(JSON.stringify({ version: '0.1.0', substitutions, fontname }))\n  const container = document.createElement('a')\n  container.setAttribute('href', data)\n  container.setAttribute('download', slugify(fontname || 'conscripter-custom-font') + '.json')\n  container.click()\n  return {\n    type: SAVE\n  }\n}\n\nexport function load() {\n  return dispatch => {\n    const loader = document.createElement('input')\n    loader.setAttribute('type', 'file')\n    loader.setAttribute('accept', 'text/json')\n    loader.onchange = e => {\n      const file = e.target.files[0]\n      const reader = new FileReader()\n      reader.onload = () => {\n        try {\n          const { substitutions = [], fontname = 'My Custom Font' } = JSON.parse(reader.result)\n          dispatch({\n            type: LOAD,\n            error: null,\n            substitutions,\n            fontname\n          })\n        } catch (e) {\n          dispatch({\n            type: LOAD,\n            error: new Error('Unable to parse selected JSON: did it come from Conscripter?'),\n            substitutions: [],\n            fontname: 'My Custom Font'\n          })\n        }\n      }\n      reader.readAsText(file)\n    }\n    loader.click()\n  }\n}","import createStore from './store'\nimport * as actions from './actions'\n\nexport {\n  createStore,\n  actions\n}","export { fonts } from './fonts'\nexport * from './substitution'"],"mappings":"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AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AAJA;AAMA;AAEA;AACA;AACA;AACA;AACA;AAHA;AAKA;AAEA;AACA;AACA;AACA;AACA;AAHA;AAKA;AAEA;AAAA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AAEA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AANA;AAQA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAFA;AAFA;AAUA;AAEA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AAFA;AAIA;AAEA;AACA;AACA;AACA;AACA;AAHA;AAKA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;;;;;;;;;;;;ACvMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;;;;;;;;ACDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;A","sourceRoot":""}